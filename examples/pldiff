#!/usr/bin/env ruby -w
#--
# Last Change: Wed Jul 13 20:06:55 2005
#++
=begin rdoc

== pldiff -- show the differences between two (v)pl files.

  Usage: pldiff [options] file file
  file can be tfm, pl, vpl or vf files.
      -d, --delta DELTA                Don't report differences whithin +/- DELTA percent
      -c, --ignore-comments            ignore comments
  
      -h, --help                       Show this help
  

---
Author:: Patrick Gundlach <patrickg@despammed.com>
License::  Copyright (c) 2005 Patrick Gundlach.
           Released under the terms of the GNU General Public License

=end

# :enddoc:

require 'optparse'
require 'ostruct'

# $: is the ruby input path - add the lib/ subdir
$:.unshift File.join(File.dirname(__FILE__),"..","lib")

require 'pl'
require 'plparser'
require 'kpathsea'
require 'enc'

def showmap(mapary)
  str = ""
  mapary.each { |entry|
    str << "  |  " << entry.join(" ") << "\n"
  }
  str
end

def plopen(filename)
  case filename
  when /\.tfm$/
    return `tftopl #{filename}`
  when /\.vf$/
    # bug in vftpl:
    # change to that dir first
    currentdir=Dir.getwd
    dirname=File.dirname(filename)
    Dir.chdir(dirname)
    fn=File.basename(filename)
    run="vftovp #{fn} #{fn.chomp("vf")}tfm"
    pl=`#{run}`
    Dir.chdir(currentdir)
    return pl
  when /\.v?pl$/
    str=nil
    File.open(filename) { |f|
      str = f.read
    }
    return str
  else
    puts "Unknown format: #{filename}"
    exit 1
  end
end

options=OpenStruct.new
kpse=Kpathsea.new

ARGV.options { |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] file file"
  opts.separator "file can be tfm, pl, vpl or vf files."
  
  opts.on("--delta","-d DELTA", Float,
         "Don't report differences whithin +/- DELTA percent") { |d|
    options.delta=d
  }
  opts.on("--ignore-comments", "-c", "ignore comments") { |i|
    options.ignore_comments=true
  }
  opts.on("--ignore-kern", "-k", "ignore difference in kerning information") { |k|
    options.ignore_kern=true
  }

  opts.on("--encoding", "-e ENC", "assume encoding ENC") {|e|
    kpse.open_file(e,"enc") { |f|
      options.encoding = ENC.new(f)
    }
  }
  opts.on("--skip-characters", "-s", "only look at fontdimen and main data") {|s|
    options.skip=true
  }
  opts.on_tail("--help", "-h", "Show this help") { puts opts; exit 0 }
  opts.separator  ""
  opts.parse!
}

#ARGV.push("test/file1.pl")
#ARGV.push("test/file2.pl")

if ARGV.size != 2
  puts "#{File.basename($0)}: Need exactly two file arguments."
  puts "Try `#{File.basename($0)} --help' for more information."
  exit 0
end


p1 = PL.new
p1.parse(plopen(ARGV[0]))
p2 = PL.new
p2.parse(plopen(ARGV[1]))

d1= p1.designunits ? 1000.0/p1.designunits : 1000.0
d2= p2.designunits ? 1000.0/p2.designunits : 1000.0

if d1!=d2
  puts "designunits differ: #{1000/d1} vs. #{1000/d2}"
end

percent = options.delta ? options.delta/50.0 : 0

[:family,:codingscheme,:designsize].each { |sym|
  if p1.send(sym) != p2.send(sym)
    puts "#{sym} differ: #{p1.send(sym)} vs #{p2.send(sym)}"
  end
}


fd1 = p1.fontdimen
fd2 = p2.fontdimen
str = ""
[:space, :stretch, :shrink, :xheight, :quad, :slant, :extraspace].each { |dim|
  next if fd1[dim] == fd2[dim]
  if fd1[dim]==nil 
    str << "Difference in #{dim}: nil vs. #{fd2[dim]}" << "\n"
  elsif fd2[dim]==nil
    str << "Difference in #{dim}: #{fd2[dim]} vs. nil" << "\n"
  elsif (fd1[dim] * d1 - fd2[dim] * d2).abs > fd1[dim] * d1 * percent
    str << "Difference in #{dim}: #{fd1[dim]*d1} vs. #{fd2[dim]*d2}" << "\n" 
  end
}
if str.size > 0
  puts "--------------------"
  puts "fondimen difference:"
  puts str
  puts "--------------------"
end

exit if options.skip==true
str= ""
0.upto(255) do |i|
  a=p1[i]
  b=p2[i]
  next if a==b
  if p1[i]==nil
    str << "#{i}: no character at this slot in font 1" << "\n"
  elsif p2[i]==nil
    str << "#{i}: no character at this slot in font 2" << "\n"
  else
    chr=""
    [:charwd, :charht, :chardp, :charic].each { |dim|
      next if a[dim]==b[dim]
      if a[dim]==nil 
        chr << "  Difference in #{dim}: nil vs. #{b[dim]}" << "\n"
      elsif b[dim]==nil
        chr << "  Difference in #{dim}: #{b[dim]} vs. nil" << "\n"
      elsif (a[dim] * d1 - b[dim] * d2).abs > a[dim] * d1 *percent
        chr << "  Difference in #{dim}: #{a[dim]*d1} vs. #{b[dim]*d2}" << "\n"
      end
    }
    if a[:ligkern] and b[:ligkern]
      if a[:ligkern][:lig] != b[:ligkern][:lig]
        chr << "  Difference in lig information"  << "\n"
        if a[:ligkern][:lig]  
          a[:ligkern][:lig].each { |lig|
            chr << "  | " << lig.inspect << "\n"
          }
        else
          chr << "nil"
        end
        chr << "  vs.\n"
        if b[:ligkern][:lig]
          b[:ligkern][:lig].each { |lig|
            chr << "  | " << lig.inspect << "\n"
          }
        else
          chr << "nil"
        end
      end
      if a[:ligkern][:krn] != b[:ligkern][:krn] and options.ignore_kern != true
        chr << "  Difference in kern information" << "\n"
        if a[:ligkern][:krn]
          (a[:ligkern][:krn] - b[:ligkern][:krn]).each { |lig|
            chr << "  | " << lig.inspect << "\n"
          }
        else
          chr << "nil"
        end
        chr << "  vs.\n"
        if b[:ligkern][:krn]
          (b[:ligkern][:krn] - a[:ligkern][:krn]).each { |lig|
            chr << "  | " << lig.inspect << "\n"
          }
        else
          chr << "nil"
        end
      end
    end
    if  a[:map] != b[:map] 
      chr << "  Difference in map\n"
      chr << showmap(a[:map])
      chr << "  vs.\n"
      chr << showmap(b[:map])
    end

    if ( a[:comment] != b[:comment] ) and ( options.ignore_comments != true)
      chr << "  Difference in comment" << "\n"
      chr << a[:comment].to_s
      chr << "\nvs.\n"
      chr << b[:comment].to_s
      chr << "\n"
    end
    if chr.length > 0
      str << "#{i}: "
      if options.encoding
        str << options.encoding[i]
      end
      str << "\n"
      str << chr
    end
  end
end
if str.length > 0
  puts "Character entries:"
  puts  "------------------"
  puts str
end

  
