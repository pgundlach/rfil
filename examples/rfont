#!/usr/bin/env ruby -w
#--
# Last Change: Tue Jul 19 15:11:07 2005
#++
=begin rdoc
= rfont -- An example font installer

rfont uses the RFI Library for installing a family of fonts.
=end

require 'optparse'
require 'ostruct'

$:.unshift File.join(File.dirname(__FILE__),"..","lib")

require 'fontcollection'
options=OpenStruct.new
optionswritevf=true
fc=FontCollection.new

ret= ARGV.options { |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] vendor/fontname  FILE1 FILE2 ..."
  opts.on("-d DIR", "--directory", "Set base directory to DIR") { |d|
    fc.set_dirs(d)
  }
  opts.on("-m", "--list-msf", "list available macro support methods") {
    puts "#{fc.temps.join("\n")}"
    exit 0;
  }
  opts.on("-p ENCFILE", String,
          "read/download ENCFILE for the PostScript encoding") {|e|
    fc.mapenc =  e
  }
  opts.on("-v", "--no-vf", "Do not create virtual fonts for reencoding") {
    fc.write_vf=false
  }
  opts.on("-s STYLE", "--style", String, "Style of the font, eg. sans, roman, typewriter") { |s|
    fc.style=s.to_sym
  }
  opts.on("-t ENCFILE",Array, "read ENCFILE for the encoding of the vf file",
          "multiple encodings can be given (seperated by ',')") {|e|
    fc.texenc = e
  }
  opts.on("-T ENCFILE",String,"equivalent to -p ENCFILE -t ENCFILE") {|e|
    fc.mapenc = e
    fc.texenc = e
  }

  opts.on("-u MSF","--use-msf",Array, "use msf files (plugins) MSF, multiple files seperated by ','") { |m|
    options.msf=m
  }
  opts.on_tail("--help","print this message and exit.") { puts opts; exit 0 }
  opts.on_tail("--version","print version number and exit.") {
    puts "#{File.basename($0)}: Version 0.9"
    exit 0
  }
  opts.parse!
}
unless ret
  puts "See --help for usage information"
  exit(-1) 
end

vendor_fontname=ARGV.shift

if vendor_fontname
  options.vendor,options.fontname=vendor_fontname.split('/')
end
if options.vendor==nil or options.fontname==nil
  puts "You must name vendor and fontname this way: vendor/fontname"
end

fonts=[]
maplines=""

fc.fontname=options.fontname
ARGV.each { |fontname|
  # puts "reading font #{File.basename(fontname)}"
  f=Font.new(fc)
  f.load_variant(fontname)
  fonts.push f
}

fc.fonts.each { |font,params|
  puts "Processing font #{font.defaultfm.fontname}"
  font.apply_ligkern_instructions(RFI::STDLIGKERN)
#   puts "weight: #{params[:weight]}"
#   puts "variant: #{params[:variant]}"
#   puts "expert set" if params[:expert]==true
#   puts "sc/osf"  if params[:smallcaps]==true
  font.write_files(:dryrun=>false, :verbose=>false, :mapfile=>false
                   )
  maplines << font.maplines.to_s
}

File.open(File.join(fc.get_dir(:map),options.fontname + ".map"), "w") { |f|
  f << maplines
}
if options.msf
  options.msf.each{ |m|
    fc.run_temps(m.to_sym)
  }
end

