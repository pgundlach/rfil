#!/usr/bin/env ruby
#--
# Last Change: Mon May 22 12:38:42 2006
#++
=begin rdoc

== afminfo - print out information about an afm or truetype font file

  Usage: afminfo [options] afm-file[.afm]
      -m, --metrics                    show global metrics information
      -v, --verbose                    verbose output
          --[no-]info                  list general information (default)
      -l, --list-glyphs                list all available glyphs
      -g, --glyphinfo g                information about a specific glyph
      -h, --help                       Show this help
          --version                    Show version information
  
---
Author:: Patrick Gundlach <patrick@gundla.ch>
License::  Copyright (c) 2006 Patrick Gundlach.
           Released under the terms of the GNU General Public License
=end

# :enddoc:

AFMINFO_VERSION="0.1"

require 'optparse'
require 'ostruct'
require 'rfil/font/afm'
require 'rfil/version'

################################################## texttable.rb follows

# Render a list of data column-wise or row-wise. TextTable is used to
# print a table to the console, without a GUI.
#
# Example:
#  data=%w(one two three four five six seven eight nine ten)
#  puts TextTable.do_columns(data)
#
# This will print out this table:
#  one   five  eight
#  two   six   nine 
#  three seven ten  
#  four
# see that the order is column one first, then second column ...
#
# Another posibility would be:
#  puts TextTable.do_rows(data)
# which outputs
#  one   two   three
#  four  five  six  
#  seven eight nine 
#  ten   


class TextTable
  class << self
    #     def columns(data,maxchars=80)
    #       m,c=count_columns=calculate_maxwidth_columns(data,maxchars)
    #       return c
    #     end

    # def maxwidth(data,maxchars=80)
    #       m,c=count_columns=calculate_maxwidth_columns(data,maxchars)
    #       return m
    #     end

    # Arrange the data in columns. The total width is <= maxchars.
    def do_columns(data,maxchars=80)
      maxwidth,count_columns=calculate_maxwidth_columns(data,maxchars)
      
      tmp=""
      # amount of data(rows) in each column. The first
      # count_full_columns columns might have more rows then the last
      # columns.
      rowsmin = (data.size * 1.0 / count_columns).floor
      rowsmax = (data.size * 1.0 / count_columns).ceil
      count_full_columns = data.size % count_columns
      
      distribution=Array.new()
      distribution[0]=0
      count = 0
      (0...count_columns).each { |col|
        if col < count_full_columns
          count += rowsmax
        else 
          count += rowsmin
        end
        distribution[col]= count
      }
      
      distribution.unshift 0
      (0...rowsmax).each { |row|
        tmp <<((0...count_columns).collect { |column| 
                 w = data[distribution[column] + row]
                 if (column >= count_full_columns) and (row >= rowsmin)
                   w = ""
                 end
                 sprintf("%-#{maxwidth}s",w)
               }.join(' '))
        tmp << "\n"
      }
      tmp 
    end

    # Arrange the data in rows.
    def do_rows(data,maxchars=80)
      maxwidth,count_columns=calculate_maxwidth_columns(data,maxchars)
      tmp=""
      (0...data.size).each { |x|
        tmp << sprintf("%-#{maxwidth}s",data[x]) +
        if (x+1) % count_columns == 0
          "\n"
        else
          " "
        end
      }
      tmp << "\n"
      tmp 
    end

    private

    def calculate_maxwidth_columns(data,maxchars)
      maxwidth = 0
      data.each { |elt|
        maxwidth = maxwidth > elt.length ? maxwidth : elt.length
      }
      columns = (maxchars/(maxwidth + 1)).floor
      raise ArgumentError,"calculated columns == 0, need wider table" if columns==0
      return maxwidth,columns
    end
  end
end

################################################## texttable.rb ends here

class AFMinfo # :nodoc:
  def initialize (afm)
    @afm = afm
    @uppercase_letters = ('A'..'Z').collect { |l|  l }
    @lowercase_letters = ('a'..'z').collect { |l|  l }
    @digits = %w(one two three four five six seven eight nine zero)
  end
  def stdformat
    "%-18s "
  end
  def printout (str,value)
    puts sprintf(stdformat + "%s", str + ":" ,value.to_s)
  end

  def num_to_string (num,reservespace=true)
    formatstring = "%" 
    formatstring << " " if reservespace
    formatstring << (num.to_i == num ? "d" : "f")
    # output "integer" if value after decimal point is 0
    sprintf(formatstring,num)
  end
  
  def dump_maininfo
    puts "General font information:"
    puts "========================="
    printout("Filename",@afm.filename)
    [ 
      ["Fontname",:fontname],
      ["FullName",:fullname],
      ["Family name",:familyname],
      ["Weight",:weight],
      ["EncodingScheme",:encodingscheme],
#      ["·","·"],
    ].each { |s,m|
      printout(s,@afm.send(m))
    }
    puts sprintf(stdformat,'Number of gylphs:') +  @afm.count_charmetrics.to_s + 
      " (encoded: " + @afm.count_charmetrics_encoded.to_s +  ", unencoded: " + @afm.count_charmetrics_unencoded.to_s + ")"

  end
  def dump_metrics
    puts "\n\nGlobal metrics information:"
    puts "=========================="
    puts sprintf(stdformat,"FontBBox:") + @afm.fontbbox.collect { |f|
      num_to_string(f)
    }.join(' ') + ' (llx,lly,urx,ury)'
    printout('IsFixedPitch',@afm.isfixedpitch)

    [ 
      ["ItalicAngle", :italicangle],
      ["UnderlinePosition", :underlineposition],
      ["UnderlineThickness", :underlinethickness],
      ["CapHeight", :capheight],
      ["XHeight", :xheight],
      ["Ascender", :ascender],
      ["Descender", :descender]
    ].each { |s,m|
      puts sprintf(stdformat,s) +  num_to_string(@afm.send(m))
    }
  end
  def dump_glyphinfo (glyph)
    chars=@afm.chars[glyph]
    puts "\n\nGlyph information (" + glyph + ")"
    puts "===================="
    puts sprintf(stdformat,"Encoding pos:") +
      if chars.c == -1 
        "--" 
      else 
        sprintf("%d (dec), %x (hex), %o (oct)",chars.c,chars.c,chars.c)
      end
    puts sprintf(stdformat,"Width x (wx)")  + chars.wx.to_s
    puts sprintf(stdformat,"Bounding box")  + chars.b.collect { |f|
      num_to_string(f,false)
    }.join(' ') + ' (llx,lly,urx,ury)'
    puts "Kerning pairs: (x,y)"
    puts "--------------------"
    chars.kern_data.each { |k,v|
      puts sprintf(stdformat,"  " + k) + num_to_string(v[0]) + "," +   
        num_to_string(v[1]) 
    }
  end
  def dump_glyphs
    chars=@afm.chars
    puts "\n\nList of glyphs"
    puts "================"
    removefromlist=[]
    if @uppercase_letters.all? { |glyph|
        chars[glyph]
      }
      puts sprintf(stdformat,"A-Z") + "available"
      removefromlist += @uppercase_letters
    else
      puts sprintf(stdformat,"A-Z") + "some missing"
    end
    if @lowercase_letters.all? { |glyph|
        chars[glyph]
      }
      puts sprintf(stdformat,"a-z") + "available"
      removefromlist += @lowercase_letters
    else
      puts sprintf(stdformat,"a-z") + "some missing"
    end
    if @digits.all? { |glyph|
        chars[glyph]
      }
      puts sprintf(stdformat,"one, two, .., zero") + "available"
      removefromlist += @digits
    else
      puts sprintf(stdformat,"one, two, .., zero") + "some missing"
    end
    puts
    glyphlist=[]
    chars.each { |glyph,h|
      glyphlist.push(glyph + (h.c == -1 ? "*" : ""))
    } 
    glyphlist = glyphlist - removefromlist
    glyphlist.sort! { |a,b|
      a.casecmp b
    }
    puts TextTable.do_columns(glyphlist)
    puts "\n* = unencoded - only glyphs not mentioned above listed"
  end

end

options=OpenStruct.new
options.verbose = false
options.metrics = false
options.glyph = nil
options.listglyphs = false
options.generalinfo = true

ARGV.options { |opt|
  opt.banner = "Usage: #{File.basename($0)} [options] afm-file[.afm]"
  opt.on("--metrics", "-m", "show global metrics information") { options.metrics=true}
  opt.on("--verbose", "-v", "verbose output") { options.verbose=true }
  opt.on("--[no-]info", "list general information (default)") { |x|
    options.generalinfo=x }
  opt.on("--list-glyphs", "-l", "list all available glyphs") { options.listglyphs=true }
  opt.on("--glyphinfo g" , "-g", 
         "information about a specific glyph") { |arg| 
    options.glyph = arg
  }
    
  opt.on("--help", "-h", "Show this help") { puts opt; exit 0 }
  opt.on("--version", "Show version information") {
    puts %Q{This is afminfo version #{AFMINFO_VERSION}, based on rfil version #{RFIL_VERSION}\n#{COPYRIGHT}\nMore information: #{HOMEPAGE}}; exit 0 }
  opt.separator  ""
  opt.separator COPYRIGHT
  opt.parse!
}

unless ARGV.size==1
  puts "Please specify one afm-file to read"  if ARGV
  exit 1
end


# afm=Font::AFM.new(:verbose => options.verbose)
afm=RFIL::Font::Metric.read(ARGV[0],:verbose => options.verbose)

ai = AFMinfo.new(afm)
ai.dump_maininfo if options.generalinfo
ai.dump_metrics if options.metrics
options.glyph && ai.dump_glyphinfo(options.glyph)
ai.dump_glyphs if options.listglyphs
